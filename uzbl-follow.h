"\n"
"// This script is taken from UZBL and edited a little\n"
"\n"
"/* This is the basic linkfollowing script.\n"
" * Its pretty stable, and you configure which keys to use for hinting\n"
" *\n"
" * TODO: Some pages mess around a lot with the zIndex which\n"
" * lets some hints in the background.\n"
" * TODO: Some positions are not calculated correctly (mostly\n"
" * because of uber-fancy-designed-webpages. Basic HTML and CSS\n"
" * works good\n"
" */\n"
"\n"
"\n"
"//Calculate element position to draw the hint\n"
"//Pretty accurate but on fails in some very fancy cases\n"
"function elementPosition(el) {\n"
"    var up = el.offsetTop;\n"
"    var left = el.offsetLeft;\n"
"    var width = el.offsetWidth;\n"
"    var height = el.offsetHeight;\n"
"    while (el.offsetParent) {\n"
"        el = el.offsetParent;\n"
"        up += el.offsetTop;\n"
"        left += el.offsetLeft;\n"
"    }\n"
"    return [up, left, width, height];\n"
"}\n"
"//Here we choose what to do with an element if we\n"
"//want to \"follow\" it. On form elements we \"select\"\n"
"//or pass the focus, on links we try to perform a click,\n"
"//but at least set the href of the link. (needs some improvements)\n"
"function clickElem(item, command) {\n"
"	midorator_command(\"delhints\");\n"
"	midorator_command('hide entry');\n"
"	if (item) {\n"
"		if (item.click)\n"
"			item.click();\n"
"		else\n"
"			midorator_command(command, item);\n"
"	}\n"
"}\n"
"//Draw all hints for all elements passed. \"len\" is for\n"
"//the number of chars we should use to avoid collisions\n"
"function reDrawHints(elems, chars) {\n"
"    midorator_command(\"delhints\");\n"
"    for (var i = 0; i < elems[0].length; i++) {\n"
"        if (elems[0][i]) {\n"
"            var label = elems[1][i].substring(chars);\n"
"            var h = midorator_command('genhint', elems[0][i], label);\n"
"        }\n"
"    }\n"
"}\n"
"// pass: number of keys\n"
"// returns: key length\n"
"function labelLength(n) {\n"
"	var oldn = n;\n"
"	var keylen = 0;\n"
"	if(n < 2) {\n"
"		return 1;\n"
"	}\n"
"	n -= 1; // our highest key will be n-1\n"
"	while(n) {\n"
"		keylen += 1;\n"
"		n = Math.floor(n / charset.length);\n"
"	}\n"
"	return keylen;\n"
"}\n"
"// pass: number\n"
"// returns: label\n"
"function intToLabel(n) {\n"
"	var label = '';\n"
"	do {\n"
"		label = charset.charAt(n %% charset.length) + label;\n"
"		n = Math.floor(n / charset.length);\n"
"	} while(n);\n"
"	return label;\n"
"}\n"
"// pass: label\n"
"// returns: number\n"
"function labelToInt(label) {\n"
"	var n = 0;\n"
"	var i;\n"
"	for(i = 0; i < label.length; ++i) {\n"
"		n *= charset.length;\n"
"		n += charset.indexOf(label[i]);\n"
"	}\n"
"	return n;\n"
"}\n"
"//Put it all together\n"
"function followLinks(follow, command) {\n"
"    var s = follow.split('');\n"
"    var linknr = labelToInt(follow);\n"
"    var elems = [ midorator_command('getelems', command), [] ];\n"
"    var len = labelLength(elems[0].length);\n"
"    var leftover = [[], []];\n"
"    if (s.length == len && linknr < elems[0].length && linknr >= 0) {\n"
"        clickElem(elems[0][linknr], command);\n"
"    } else {\n"
"        for (var j = 0; j < elems[0].length; j++) {\n"
"            var b = true;\n"
"            var label = intToLabel(j);\n"
"            var n = label.length;\n"
"            for (n; n < len; n++) {\n"
"                label = charset.charAt(0) + label;\n"
"            }\n"
"            for (var k = 0; k < s.length; k++) {\n"
"                b = b && label.charAt(k) == s[k];\n"
"            }\n"
"            if (b) {\n"
"                leftover[0].push(elems[0][j]);\n"
"                leftover[1].push(label);\n"
"            }\n"
"        }\n"
"        reDrawHints(leftover, s.length);\n"
"    }\n"
"}\n"
"\n"
"var charset = '%s';\n"
"followLinks('%s', '%s');\n"
"\n"
