
alias q action TabClose
alias undo action UndoTabClose

cmdmap : entry :
cmdmap <Tab> pass
cmdmap ; entry ;
cmdmap / entry /
cmdmap ? entry ?
cmdmap [[ go prev
cmdmap ]] go next
cmdmap r reload
cmdmap R reload!
cmdmap <space> scroll +1p
cmdmap <Page_Down> scroll +1p
cmdmap <C-f> scroll +1p
cmdmap <Page_Up> scroll -1p
cmdmap <C-b> scroll -1p
cmdmap <Up> scroll -1
cmdmap k scroll -1
cmdmap <Down> scroll +1
cmdmap j scroll +1
cmdmap l scroll h +1
cmdmap <Right> scroll h +1
cmdmap h scroll h -1
cmdmap <Left> scroll h -1
cmdmap <Home> scroll 0
cmdmap gg scroll 0
cmdnmap gg scroll %ip
cmdmap <End> scroll 32768p
cmdmap G scroll 32768p
cmdnmap G scroll %ip
cmdmap <BackSpace> go back
cmdmap H go back
cmdmap L go forth
cmdmap p paste
cmdmap P tabpaste
cmdmap y yank
cmdmap n next
cmdmap N next!
cmdmap t $ entry ':tabnew '
cmdmap o $ entry ':open '
cmdmap T js command("entry", ":tabnew " + window.location)
cmdmap O js command("entry", ":open " + window.location)
cmdmap f entry ;f
cmdmap F entry ;F
cmdmap i insert
cmdmap u undo
cmdmap d q
cmdmap D js var i = Number(command("get", "widget", "tabs", "page")); command("widget", "tabs", "page", String(i - 1)); command("killtab", String(i));
cmdmap gt action TabNext
cmdmap <C-n> action TabNext
cmdmap <C-Tab> action TabNext
cmdnmap gt js command("widget", "tabs", "page", %i - 1);
cmdmap gT action TabPrevious
cmdmap <C-p> action TabPrevious
cmdmap g0 widget tabs page 0
cmdmap g$ widget tabs page -1
cmdmap <CR> submit
cmdmap <C-c> action Stop

cmdmap gp action Preferences
cmdmap gs action ManageSearchEngines
cmdmap A action BookmarkAdd

cmdmap gu js document.location = ".."
cmdmap gU js document.location = "/"

cmdmap bm action Menubar
cmdmap bn action Navigationbar
cmdmap bb action Bookmarkbar

cmdmap m set_mark
cmdmap ' swap_mark
cmdmap ` goto_mark

cmdmap <Esc> blur

jscmd blur document.activeElement.blur()

{{{
	jscmd scroll
		var vert = (args[0] != "h");
		var num = vert ? args[0] : args[1];
		if (!num)
			throw("scroll: too few arguments");
		if (!window.scrollthing) {
			window.scrollthing = document.body;
		}
		var pagesize = 20;
		if (num.substr(-1) == "p") {
			if (window.scrollthing == document.body) {
				pagesize = (vert ? window.innerHeight : window.innerWidth) * 0.9;
			}
			num = num.substr(0, num.length - 1);
		}
		var pos = vert ? window.scrollthing.scrollTop : window.scrollthing.scrollLeft;
		if (num.substr(0, 1) == "+")
			pos += Number(num.substr(1)) * pagesize;
		else if (num.substr(0, 1) == "-")
			pos -= Number(num.substr(1)) * pagesize;
		else
			pos = Number(num) * pagesize;
		if (vert)
			window.scrollthing.scrollTop = pos;
		else
			window.scrollthing.scrollLeft = pos;
}}}

{{{
	hook paste
		var el = document.activeElement;
		if (el) {
			var ss = el.selectionStart;
			el.value = el.value.substring(0, el.selectionStart) + args[0] + el.value.substring(el.selectionEnd);
			el.selectionStart = el.selectionEnd = ss + args[0].length;
		}
}}}

{{{
	hook earlyload
		window.midorator_fix_mode = function() {
			var el = document.activeElement;
			var str2bool = function(s) {
				return s == true || s == "true" || s == "yes" || s == "on" || s == "1";
			}
			if (el
					&& str2bool(command("get", "option", "auto_switch_mode"))
					&& command("get", "caller_tab") == command("get", "widget", "tabs", "page")) {
				var o = document.querySelectorAll(command("get", "option", "insert_mode_tags"));
				for (var i = 0; i < o.length; i++)
					if (el == o[i]) {
						command("insert");
						return;
					}
				command("insert", "n");
			}
		}
		document.addEventListener("focus", window.midorator_fix_mode, true);
		document.addEventListener("blur", window.midorator_fix_mode, true);
		document.addEventListener("load", window.midorator_fix_mode, true);
		window.midorator_fix_mode();
}}}

{{{
	hook tabfocus
		if (window.midorator_fix_mode)
			window.midorator_fix_mode();
}}}

{{{
	jscmd js_keywait
		command("jscmd", "js_keywait_cb", args[0]);
		command("insert", "k");
}}}

{{{
	jscmd set_mark
		if (args[0]) {
			if (!window.midorator_marks)
				window.midorator_marks = new Array();
			if (!window.scrollthing) {
				window.scrollthing = document.body;
			}
			window.midorator_marks[args[0]] = [ window.scrollthing.scrollTop, window.scrollthing.scrollLeft ];
		} else
			command("js_keywait", "command('set_mark', args[0])");
}}}

{{{
	jscmd goto_mark
		if (args[0]) {
			if (!window.midorator_marks || !window.midorator_marks[args[0]])
				command("error", "Mark " + args[0] + " not set");
			else {
				if (!window.scrollthing) {
					window.scrollthing = document.body;
				}
				window.scrollthing.scrollTop = window.midorator_marks[args[0]][0];
				window.scrollthing.scrollLeft = window.midorator_marks[args[0]][1];
			}
		} else
			command("js_keywait", "command('goto_mark', args[0])");
}}}

{{{
	jscmd swap_mark
		if (args[0]) {
			if (!window.midorator_marks)
				window.midorator_marks = new Array();
			if (!window.scrollthing) {
				window.scrollthing = document.body;
			}
			if (!window.midorator_marks[args[0]]) {
				command("error", "Mark " + args[0] + " not set");
			}
			var old = window.midorator_marks[args[0]];
			window.midorator_marks[args[0]] = [ window.scrollthing.scrollTop, window.scrollthing.scrollLeft ];
			if (old) {
				window.scrollthing.scrollTop = old[0];
				window.scrollthing.scrollLeft = old[1];
			}
		} else
			command("js_keywait", "command('swap_mark', args[0])");
}}}

{{{
	hook about:config
		function add_row(table, object, property) {
			var tr = table.insertRow(-1);
			var td1 = tr.insertCell(-1);
			td1.className = 'midorator_config_td1';
			td1.innerText = property;
			var td2 = tr.insertCell(-1);
			td2.className = 'midorator_config_td2';
			var form = document.createElement('form');
			td2.appendChild(form);
			var input = document.createElement('input');
			form.appendChild(input);
			input.value = command('get', 'widget', object, property);
			form.onsubmit = function(event) {
				command('widget', object, property, input.value);
				event.preventDefault();
			};
			var set = document.createElement('button');
			set.type = 'submit';
			form.appendChild(set);
			set.innerText = 'set';
			var reset = document.createElement('button');
			form.appendChild(reset);
			reset.innerText = 'reset';
			reset.onclick = function() {
				input.value = command('get', 'widget', object, property);
			};
			var td3 = tr.insertCell(-1);
			td3.className = 'midorator_config_td3';
			td3.innerText = command('get', 'prophelp', object, property);
		}
		function add_rows(table, object) {
			var props = command('get', 'widget', object).split('\n');
			var i;
			for (i = 0; i < props.length; i++)
				if (props[i] != '')
					add_row(table, object, props[i]);
		}
		var table = document.createElement('table');
		table.className = 'midorator_config_table';
		document.body.innerHTML = '';
		document.body.appendChild(table);
		add_rows(table, 'browser.settings');
}}}

{{{
	css
		.midorator_config_table,
		.midorator_config_table td {
			font-size: 8px;
			font-family: Terminus, fixed, monospace;
			white-space: nowrap;
			border: 1px dotted black !important;
			border-collapse: collapse;
			padding: 0px;
			margin: 0px;
		}
		.midorator_config_table form {
			display: inline;
		}
		.midorator_config_table input {
			border-width: 1px;
			width: 30em;
		}
		.midorator_config_table button {
			border-width: 1px;
		}
		.midorator_config_td1:after {
			content: ": ";
		}
		.midorator_config_td3:before {
			content: "-- ";
			padding-left: 1em;
		}
}}}




set hint_items a[href], input, select, textarea, button, [onclick]

set hint_F_items a[href]
set hint_b_items a[href]
set hint_y_items a[href]
set hint_m_items a[href]

set hint_F_script command('tabnew', object.href);
set hint_b_script command('tabnew!', object.href);
set hint_y_script command('yank', object.href);
set hint_m_script command('tabnew!', object.href); command('entry', ';m');

{{{
	set hint_script
		object.focus();
		var evt = document.createEvent("MouseEvents");
		evt.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		object.dispatchEvent(evt);
		evt = document.createEvent("MouseEvents");
		evt.initMouseEvent("mouseup", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		object.dispatchEvent(evt);
		evt = document.createEvent("MouseEvents");
		evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		object.dispatchEvent(evt);
}}}

set go_next ^>$ | ^>>$ | ^>>>$ | ^next$ | next[ ]*[>»] | ^далее | ^след[.у] | next | >
set go_prev ^<$ | ^<<$ | ^<<<$ | ^prev$ | ^previous | prev[.]?[ ]*[<«] | previous[ ]*[<«] | ^назад | ^пред[.ы] | previous | <

set insert_mode_tags input:not([type]), input[type="input"], input[type="text"], input[type="password"], select[multiple], textarea, [contenteditable="true"]

set paste_primary 1

set auto_switch_mode 1

source! ~/.midoratorrc

